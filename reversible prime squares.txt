#***********************************************************************************************************
# Author: MATOBAKELE A. Lehlohonolo
# Student No.: 202000345
# Purpose: The program that determines and prints the first 10 reversible prime squares in machine coded language
# Contact: lehlonotobaka@gmail.com
#************************************************************************************************************
##############################################################
#      In essence we want to print:
#The first 10 reversible prime squares are:
#(1)169
#(2)961
#(3)12769
#(4)96721
#(5)1042441
#(6)1062961
#(7)1216609
#(8)1442401
#(9)1692601
#(10)9066121
########################################################

# .data

# .text
# . globl main
# main:
  # Display Message
    0x34020004 // li $v0, 4
    0x3c041001 // la $a0, msg <- lui $a0, 4097
    0x0XXXXXXC // syscall
  # Function call
    0x0C400154 // jal printReversiblePrimeNumbers 
  # Exit program
    0x3402000A // ori $v0, $zero, 10
    0x0XXXXXXC // syscall

# Implementation of isPrime(int num)
# isPrime:
    0x34020000    // li $v0, 0 # bool flag = 0
    0x34090001    // li $t1, 1 # int i = 1
    0x340A0002    // li $t2, 2 # Set factors to two - prime has two factors
    # is_prime_loop:
        0x0089082A  // slt $at, $a0, t1 
        0x14200030  // bne $at, $zero, 48 , checkFactors
        0x0089001a  // div $a0, $t1
        0x00005810  // mfhi $t3
        0x15600004  // bnez $t3, endOfForLoop_prime
        0x23390001  // addi $t9, $t9, 1 # # factors++ - increase number of factors by 1
        0x21290001  // addi $t1, $t1, 1 # i++
        0x08100012  // j is_prime_loop
    # endOfForLoop_prime:
        0x21290001  // addi $t1, $t1, 1 # i++
        0x08100012  // j is_prime_loop
    # checkFactors:
        0x340b0001  // ori $t3, $zero, 1
        0x132a0002  // beq $t9, $t2, True # is number of factors 2?
        0x08100020  // j exitIsPrime
    # True:
        0x000b1021  // addu $v0, $zero, $t3
    #exitIsPrime:
        0x0000c821  // addu $t9, $zero, $zero
        0x03e00008  // jr $ra
# Implementation of squareNum(int num)
# squareNum:
    0x00840018   //mult $a0, $a0
    0x00001012   //mflo $v0
    0x03e00008   //jr $ra
# Implementation of isSquareNum(int num, i)
# isSquareNum:
    0x23bdfff4   // addi $sp, $sp, -12
    0xafbf0000   // sw $ra, 0($sp)
    0xafb60004   // sw $s6, 4($sp)
    0xafb70008   // sw $s7, 8($sp)

    0x34030000   // ori $v1, $zero, 0 # bool flag = 0
    0x01c02021   // addu $a0, $t6, $zero
    0x0c100022   //jal squareNum
    0x14560004   //bne $v0, $s6, isFalse # (sqtrNum(num) != num)
    # isTrue:
        0x00601021  // addu $v0, $v1, $zero
        0x20420001  // addi $v0, $v0, 1 # flag = true
        0x08100032  // j exitIsSquareNum
    # isFalse:
        0x00001021  // addu $v0, $zero, $zero
        0x08100032  // j exitIsSquareNum
    # exitIsSquareNum:
        0x8fb70008  // lw $s7, 8($sp)
        0x8fb60004  // lw $s6, 4($sp)
        0x8fbf0000  // lw $ra, 0($sp)
        0x23bd000c  // addi $sp, $sp, 12
        0x03e00008  // jr $ra
# Implementation of numReverse
# numReverse:
    0x20020000  // addi $v0, $zero, 0 # int reverse = 0
    # loopNumReverse:
        0x288a0001  // slti $t2, $a0, 1
        0x1540000a  // bne $t2, $zero, exitNumReverse
        0x340a000a  // ori $t2, $zero, 10 # store 10 into register $t2
        0x008a001a  // div $a0, $t2
        0x00004010  // mfhi $t0
        0x004a0018  // mult $v0, $t2 # reverse * 10
        0x00004812  // mflo $t1 # $t1 = reverse * 10
        0x01281020  // add $v0, $t1, $t0 # reverse = (reverse * 10) + result
        0x008a001a  // div $a0, $t2 # num / 10
        0x00002012  // mflo $a0 # num = num / 10
        0x08100038  // j loopNumReverse 
    # exitNumReverse:
        0x03e00008  // jr $ra
# Implementation of isNotPalindrome(int num)
# isNotPalindrome:
    0x23bdfff8  // addi $sp, $sp, -8
    0xafbf0000  // sw $ra, 0($sp)
    0xafb00004  // sw $s0, 4($sp)
    0x00048021  // addu $s0, $a0 # $s0 <- argument
    0x34030001  // ori $v1, $zero, 1 # bool flag = true
    0x0c100037  // jal numReverse # a function call: numReverse(num)
    0x00404020  // add $t0, $v0, $zero # store the result of the function call in $t0
    0x00031021  // addu $v0, $zero, $v1
    0x16080002  // bne $s0, $t0, exitIsNotPalindrome # if ($a0 != $t0) goto exit
    0x00001021  // addu $v0, $zero, $zero # if (num == numReverse(num)) set flag = false
    # exitIsNotPalindrome:
        0x8fb00004  // lw $s0, 4($sp)
        0x8fbf0000  // lw $ra, 0($sp)
        0x23bd0008  // addi $sp, $sp, 8
        0x03e00008  // jr $ra
# Implementation of printReversiblePrimeNumbers()    
# printReversiblePrimeNumbers:
    0x23bdffdc  // addi $sp, $sp, -36
    0xafbf0000  // sw $ra, 0($sp)
    0xafb00004  // sw $s0, 4($sp)    # holds $a0
    0xafb10008  // sw $s1, 8($sp)    # holds SIZE
    0xafb2000c  // sw $s2, 12($sp)   # holds index
    0xafb30010  // sw $s3, 16($sp)   # holds count
    0xafb40014  // sw $s4, 20($sp)   # holds set (bool type variable)
    0xafb50018  // sw $s5, 24($sp)   # hold the value 1 for comparison
    0xafb6001c  // sw $s6, 28($sp)
    0xafb70020  // sw $s7, 32($sp)

    0x3411000a  // ori $s1, $zero, 10  # int SIZE = 10
    0x34120000  // ori $s2, $zero, 0   # int index = 0
    0x34130001  // ori $s3, $zero, 1   # int count = 1
    0x34140000  // ori $s4, $zero, 0   # bool set = false
    0x34150001  // ori $s5, $zero, 1   # load value 1 into $s5
    0x34170000  // ori $s7, $zero, 0   # int i = 0
    # print_forLoop:
        0x0277782a  // slt $t7, $s3, $s7
        0x15e00028  // bne $t7, $zero, end_forLoop
        0x00172021  // addu $a0, $zero, $s7     # $a0 <- i
              # call isPrime
        0x0c10000f  // jal isPrime       # check whether 'i' is a prime number
        0x14550021  // bne $v0, $s5, isNotPrime
              # call squareNum
        0x0c100022  // jal squareNum
        0x00028021  // addu $s0, $zero, $v0     # $s0, <- square(int i) , num = $s0
              # call numReverse
        0x00102021  // addu $a0, $zero, $s0
        0x0c100037  // jal numReverse
        0x0002b021  // addu $s6, $zero, $v0     # #s6 <- numReverse(int num) , numRev = $s6
              # call isNotPalindrome
        0x00102021  // addu $a0, $zero, $s0     # $a0 <- num
        0x0c100044  // jal isNotPalindrome
        0x0c100044  // addu $t7, $zero, $v0     # $t7 <- isNotPalindrome(int num)
              # call numReverse
        0x00172021  // addu $a0, $zero, $s7     # $a0 <- i
        0x0c100037  // jal numReverse
        0x00027021  // addu $t6, $zero, $v0     # $t6 <- numReverse(i)
              # call isSquareNum
        0x00162021  // addu $a0, $zero, $s6     # 
        0x0c100025  // jal isSquareNum   # isSquareNum($s6, $s7)
        0x00026021  // addu $t4, $zero, $v0     # $t4 <- isSquareNum($s6, $s7)
              # call is prime
        0x000e2021  // addu $a0, $zero, $t6     # $a0 <- numReverse(i)
        0x0c10000f  // jal isPrime
        0x00026821  // addu $t5, $zero, $v0     # $t5 <- isPrime(sqrtNum(numReverse(num)))
              # inner if statement
        0x018dc024  // and $t8, $t4, $t5  
        0x01f8a024  // and $s4, $t7, $t8
        0x1695000d  // bne $s4, $s5, isNotPrime
        0x0015a021  // addu $s4, $zero, $s5     # set = 1 == $s4 <- 1
              # innermost if statement
        0x0251c82a  // slt $t9, $s2, $s1 #  true if index < SIZE
        0x1699000a  // bne $s4, $t9, isNotPrime
              # print a new line
        0x34020004  // ori $v0, $zero, 4
        0x3c011001  // lui $t0, 4097
        0x34240024  // ori $a0, $t0, 36
        0x0000000c  // syscall
              # print num - reversiblePrimeSquare
        0x00101021  // addu $v0, $zero, $s0
        0x00022020  // add $a0, $zero, $v0
        0x34020001  // ori $v0, $zero, 1
        0x0000000c  // syscall
              # continue
        0x22520001  // addi $s2, $s2, 1   # index++
      # isNotPrime:
          0x22730001// add $s3, $s3, 1   # count++
          0x22f70001  // add $s7, $s7, 1   # i++
          0x1651ffd9  // bne $s2, $s1, print_forLoop   # index != SIZE
          0x0810008b  // j end_forLoop
      # end_forLoop:
          0x8fb70020  // lw $s7, 32($sp)
          0x8fb6001c  // lw $s6, 28($sp)
          0x8fb50018  // lw $s5, 24($sp)
          0x8fb40014  // lw $s4, 20($sp)
          0x8fb30010  // lw $s3, 16($sp)
          0x8fb2000c  // lw $s2, 12($sp)
          0x8fb10008  // lw $s1, 8($sp)
          0x8fb00004  // lw $s0, 4($sp)
          0x8fbf0000  // lw $ra 0($sp)
          0x23bd0024  // addi $sp, $sp, 36
          0x03e00008  // jr $ra
